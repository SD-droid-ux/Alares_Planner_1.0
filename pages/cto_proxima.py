import streamlit as st
import pandas as pd

st.title("üîç An√°lise de CTOs utiliz√°veis e n√£o utiliz√°veis")

# Verifica se os dados foram carregados no main.py
if "df" not in st.session_state or "portas_por_caminho" not in st.session_state:
    st.error("‚ùå Dados n√£o encontrados. Fa√ßa o upload da base no menu principal.")
    st.stop()

# Carrega os dados do session_state
df = st.session_state.df.copy()
portas_por_caminho = st.session_state.portas_por_caminho.copy()

# Filtro por cidade
cidades_disponiveis = sorted(df["CIDADE"].dropna().unique())
cidade_selecionada = st.selectbox("Selecione a cidade:", cidades_disponiveis)

df_filtrado = df[df["CIDADE"] == cidade_selecionada]

# Fun√ß√£o de categoriza√ß√£o
def classificar_cto(row):
    chave = (row["POP"], row["CHASSI"], row["PLACA"], row["OLT"])
    total = portas_por_caminho.get(chave, 0)

    if total >= 128:
        if row["PORTAS"] == 8:
            return "üî¥ CTO √â SP8 MAS PON J√Å EST√Å SATURADA"
        elif row["PORTAS"] == 16:
            return "üî¥ SATURADO"
    else:
        if row["PORTAS"] == 16:
            return "‚úÖ CTO J√Å √â SP16 MAS A PON N√ÉO EST√Å SATURADA"
        elif row["PORTAS"] == 8:
            return "‚úÖ TROCA DE SP8 PARA SP16"

    return "‚ö†Ô∏è DADO INSUFICIENTE"

# Aplica a classifica√ß√£o
df_filtrado["CATEGORIA"] = df_filtrado.apply(classificar_cto, axis=1)

# Separa os dois blocos
ctos_usaveis = df_filtrado[df_filtrado["CATEGORIA"].str.startswith("‚úÖ")]
ctos_inviaveis = df_filtrado[df_filtrado["CATEGORIA"].str.startswith("üî¥")]

# Exibe resultados
st.subheader("‚úÖ CTOs que PODEMOS usar:")
st.dataframe(ctos_usaveis.reset_index(drop=True), use_container_width=True)

st.subheader("üî¥ CTOs que N√ÉO PODEMOS usar:")
st.dataframe(ctos_inviaveis.reset_index(drop=True), use_container_width=True)
